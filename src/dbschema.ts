/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.0
 * $ pg-to-ts generate -c postgres://username:password@localhost:5432/postgres -t book -t reviews -t users -s public
 *
 */


export type Json = unknown;
export type comment_status_enum = 'archived' | 'complete' | 'deleted' | 'pending';

// Table book
export interface Book {
  id: string;
  created_by: string;
  title: string | null;
  publication_year: number;
  contents: string | null;
}
export interface BookInput {
  id?: string;
  created_by: string;
  title?: string | null;
  publication_year: number;
  contents?: string | null;
}
const book = {
  tableName: 'book',
  columns: ['id', 'created_by', 'title', 'publication_year', 'contents'],
  requiredForInsert: ['created_by', 'publication_year'],
  primaryKey: 'id',
  foreignKeys: { created_by: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as Book,
  $input: null as unknown as BookInput
} as const;

// Table reviews
/** Book reviews. Is it worth reading? */
export interface Reviews {
  id: string;
  book_id: string;
  reviewer_id: string;
  created_at: Date | null;
  modified_at: Date | null;
  /** Rating of the book (1-5 stars) */
  rating: number;
  /** Content of the review, formatted with Markdown. May contain @mentions. */
  content_md: string;
}
/** Book reviews. Is it worth reading? */
export interface ReviewsInput {
  id?: string;
  book_id: string;
  reviewer_id: string;
  created_at?: Date | null;
  modified_at?: Date | null;
  /** Rating of the book (1-5 stars) */
  rating: number;
  /** Content of the review, formatted with Markdown. May contain @mentions. */
  content_md: string;
}
const reviews = {
  tableName: 'reviews',
  columns: ['id', 'book_id', 'reviewer_id', 'created_at', 'modified_at', 'rating', 'content_md'],
  requiredForInsert: ['book_id', 'reviewer_id', 'rating', 'content_md'],
  primaryKey: 'id',
  foreignKeys: {
    book_id: { table: 'book', column: 'id', $type: null as unknown as Book },
    reviewer_id: { table: 'users', column: 'id', $type: null as unknown as Users },
  },
  $type: null as unknown as Reviews,
  $input: null as unknown as ReviewsInput
} as const;

// Table users
export interface Users {
  id: string;
  name: string;
  pronoun: string | null;
}
export interface UsersInput {
  id?: string;
  name: string;
  pronoun?: string | null;
}
const users = {
  tableName: 'users',
  columns: ['id', 'name', 'pronoun'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Users,
  $input: null as unknown as UsersInput
} as const;


export interface TableTypes {
  book: {
    select: Book;
    input: BookInput;
  };
  reviews: {
    select: Reviews;
    input: ReviewsInput;
  };
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  book,
  reviews,
  users,
}
